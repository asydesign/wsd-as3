package com.wsd{	import com.hurlant.crypto.CryptoCode;	import com.wsd.display.Overlay;	import com.wsd.engine.AMF;	import com.wsd.xml.XMLParser;		import flash.display.MovieClip;	import flash.display.StageDisplayState;	import flash.events.ContextMenuEvent;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.external.ExternalInterface;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.net.navigateToURL;	import flash.system.System;	import flash.ui.ContextMenu;	import flash.ui.ContextMenuItem;		public class Base extends MovieClip	{		public static var	version:String				= '2.1'				public static var	instance:Base		public static var	config:*		public static var	overlay:*				public static var	constants:Object 			= new Object				public var 			container:MovieClip 		= new MovieClip				public function Base(config:*, callback:Function = null):void		{			var init:Function = function():void			{				if (!Base.config)			Base.config = new Object				if (!Base.config.app)		Base.config.app = new Object				if (!Base.config.app.LOG)	Base.config.app.LOG = false				if (!Base.config.app.TEST)	Base.config.app.TEST = false				if (!Base.config.overlay)	Base.config.overlay	= new Object								Base.config.app.LOG			= Base.config.app.LOG ? true : false				Base.config.app.TEST		= Base.config.app.TEST ? true : false				Base.log('==== WSD-AS3 v ' + Base.version + ' ====')				Base.log('Visit us on https://github.com/norman784/wsd-as3')				Base.log('=========================================')				Base.log('Base::Base(config: ' + config + ', callback: ' + callback + ')')				Base.overlay = new Overlay(Base.config.overlay.text, Base.config.overlay)				addChild(container)				addChild(Base.overlay)								if (Base.config.app.fullscreen === 'true')	stage.displayState = StageDisplayState.FULL_SCREEN				else 										stage.displayState = StageDisplayState.NORMAL								if (callback != null) callback()			}						Base.instance = this						if (typeof(config) != 'string') {				Base.config = config				init()			} else {				var xmlLoader:URLLoader = new URLLoader				var initXML:Function = function(e:Event):void				{					Base.config = XMLParser.toObject(new XML(e.target.data))					xmlLoader.removeEventListener(Event.COMPLETE, initXML)					init()				}								xmlLoader.addEventListener(Event.COMPLETE, initXML)				xmlLoader.load(new URLRequest(config))			}		} // Base()				private function setContextMenu():void		{			if (!ContextMenu.isSupported) return						var item:ContextMenuItem						var context = new ContextMenu			context.hideBuiltInItems()						if (Base.config.author.copyright) {				item = new ContextMenuItem(Base.config.author.copyright)				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(e:Event){					navigateToURL(new URLRequest(Base.config.author.url))				})				context.customItems.push(item)			}						contextMenu = context		} // setContextMenu()				public static function AMFconnect(params, callback:Object = null, method:String = "modules.Main.initialize"):void		{			Base.log('Base::AMFconnect(domain = ' + Base.config.proxy.domain + ', gateway = ' + Base.config.proxy.gateway + ')')						if (!callback) callback = {}						Base.constants.AMF 			= new Object			Base.constants.AMF.domain	= Base.config.proxy.domain			Base.constants.AMF.gateway	= Base.config.proxy.domain + '' + Base.config.proxy.gateway			Base.constants.AMF.OK		= AMF.OK			Base.constants.AMF.ERROR	= AMF.ERROR			Base.constants.AMF.EXPIRED	= AMF.EXPIRED						if (!callback.success) callback.success = function( e:Event ) {				if(e.target.response && e.target.response.status == AMF.OK) {					Base.log('Base::AMFconnect(SUCCESS)')					Base.overlay.show('Inicializado con exito')				} else if (e.target.response.status == AMF.EXPIRED) {					Base.log('Base::AMFconnect(EXPIRED)')					Base.overlay.show('La conexión con aplicación ha expirado, por favor inténtelo más tarde')				} else {					Base.log('Base::AMFconnect(ERROR) ' + e.target.response.message)					Base.overlay.show('Se produjo un error al inicializar la aplicación, por favor inténtelo más tarde')				}								service.removeEventListener('success', callback.success)			}						if (callback.error == null) callback.error = function( e:Event ):void {				var msg:String = ''				if (e.target) {					if (e.target.response) {						if (e.target.response.message) msg = e.target.response.message					}				}				Base.log('Base::AMFconnect(ERROR) ' + msg)				Base.overlay.show('Se produjo un error al inicializar la aplicación, por favor inténtelo más tarde')				service.removeEventListener('error', callback.error)			}						var service:* = AMF.service()			service.addEventListener('success', callback.success, false, 0, true)			service.addEventListener('error', callback.error, false, 0, true)			service.call(method, params)		} // AMFconnect				public static function AMFcall(method:String, params:Object, callback:Object = null):void		{			Base.log('Base::AMFcall(method = ' + method + ')')						if (!callback) callback = {}						if (callback.success == null) callback.success = function( e:Event ):void {				if(e.target.response && e.target.response.status == AMF.OK) {					Base.log('Base::AMFconnect(SUCCESS)')					Base.overlay.show('SUCCESS')				} else if (e.target.response.status == AMF.EXPIRED) {					Base.log('Base::AMFconnect(EXPIRED)')					Base.overlay.show('La conexión con aplicación ha expirado, por favor inténtelo más tarde')				} else {					Base.log('Base::AMFconnect(ERROR) ' + e.target.response.message)					Base.overlay.show('Se produjo un error al conectarse a la aplicación, por favor inténtelo más tarde')				}								service.removeEventListener('success', callback.success)			}						if (callback.error == null) callback.error = function( e:Event ):void {				Base.log('Base::AMFconnect(ERROR) ' + e.target.response.message)				Base.overlay.show('Se produjo un error al conectarse a la aplicación, por favor inténtelo más tarde')				service.removeEventListener('error', callback.error)			}						var service:* = AMF.service()			service.addEventListener('success', callback.success, false, 0, true)			service.addEventListener('error', callback.error, false, 0, true)			service.call(method, params)		} // AMFcall()				public static function add(child:*, name:String = 'main', clearAll:Boolean = true):void		{			if (clearAll == true) Base.removeAll()						Base.log('Base::add(child = ' + child + ', name = ' + name + ', clearAll = ' + clearAll + ')')						Base.instance.container.addChild(child)			child.name = name		} // add()				public static function remove(name:String, from:* = null):void		{			Base.log('Base::remove(name = ' + name + ')')						if (from == null) from = Base.instance.container						from.removeChild( Base.instance.container.getChildByName(name) )						System.gc()			System.gc()		} // remove()				public static function removeAll(from:* = null):void		{			Base.overlay.hide()						if (from == null) from = Base.instance.container						while(from.numChildren>0)			{				Base.log('Base::removeAll(removed ' + from.getChildAt(from.numChildren-1) + ')')				from.removeChildAt(from.numChildren-1);			}						System.gc()			System.gc()		} // removeAll()				public static function navigateToURL(url, target:String = '_self'):void		{			Base.log('Base::navigateToURL(url = ' + url + ', target = ' + target + ')')						flash.net.navigateToURL(new URLRequest(url), target)		} // navigateToURL()				public static function post(url:String, data:*, callback:* = null, encode:Boolean = false):void		{			Base.log('Base::post(url = ' + url + ', data = ' + data + ', encode = ' + encode + ')')						if (!callback) callback = {}			if (typeof(callback) === 'function') callback = {success: callback}						var success:Function = function( e:Event ):void {				loader.removeEventListener(Event.COMPLETE, success)				Base.log('Base::post(SUCCESS) response = ' + e.target.data)				if (callback.success) callback.success(e)			}			var error:Function = function( e:ErrorEvent ):void {				loader.removeEventListener(IOErrorEvent.IO_ERROR, error)				Base.log('Base::post(ERROR) response = ' + e.target.data)				if (callback.error) callback.error(e)			}						var hash:String = Base.config.app.hash.toString().length > 1 ? Base.config.app.hash : 'wsd-as3'			var crypto = new CryptoCode(hash)			var i:*			var variables:URLVariables = new URLVariables()						for (i in data) {				variables[i] = encode ? crypto.encrypt(data[i].toString()) : data[i]			}						var request:URLRequest = new URLRequest (url)			request.method = URLRequestMethod.POST			request.data = variables						var loader:URLLoader = new URLLoader (request)			loader.dataFormat = URLLoaderDataFormat.TEXT			loader.addEventListener(Event.COMPLETE, success)			loader.addEventListener(IOErrorEvent.IO_ERROR, error)			//loader.addEventListener(SecurityErrorEvent.IO_ERROR, error, false, 0, true)			loader.load(request)		} // post()				public static function externalCall(method:String, params:* = null):void		{			if (!ExternalInterface.available) return						if (method.indexOf('console.log') == -1) Base.log('Base::externalCall(method = ' + method + ', params = ' + params + ')')			ExternalInterface.call(method, params)		} // externalCall()				public static function addExternalCall(method:String, callback:Function):void		{			if (!ExternalInterface.available) return						Base.log('Base::addExternalCall(method = ' + method + ', callback = ' + callback + ')')			ExternalInterface.addCallback(method, callback)		} // addExternalCall()				public static function log(string, type = 'INFO'):void		{			if (Base.config.app.LOG) {				trace(type + "::" + string)				//externalCall('console.log', type + "::" + string)			}		} // log()				public static function rand(low:Number=0, high:Number=1) :int		{			return Math.floor(Math.random() * (1+high-low)) + low		} // rand()				public static function var_dump(object:*, tab:int = 0):void {			if (object == null) return			var tabDeep:String = ''			for (var i:int = 0; i < tab; ++i) 	tabDeep += '	'						Base.log(tabDeep + '	' + typeof(object) + ' => ' + object, 'VAR_DUMP')						for (var key:String in object)			{				Base.log(tabDeep + '	' + key, 'VAR_DUMP')				Base.var_dump(object[key], tab+1)			}		} // var_dump()	}}