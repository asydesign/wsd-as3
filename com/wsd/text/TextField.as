package com.wsd.text{	import com.wsd.Base	import com.wsd.View		import flash.text.TextField	import flash.text.TextFormat	import flash.text.TextFormatAlign		public class TextField extends View	{		private var textField:flash.text.TextField = new flash.text.TextField				public function TextField(options:Object = null)		{			var txtFormat:TextFormat = new TextFormat()						if (options == null)			options = new Object						switch(options.align) {				case 'right':					options.align = TextFormatAlign.RIGHT				break;				case 'left':					options.align = TextFormatAlign.LEFT				break;				default:					options.align = TextFormatAlign.CENTER				break;			}						txtFormat.size = (typeof(options.size) == 'number' ? options.size : 20)			txtFormat.align = options.align						if (options.font != null)	txtFormat.font = options.font						trace(options.font)						textField.defaultTextFormat = txtFormat			textField.textColor 	= (typeof(options.color) == 'number' ? options.color : 0x000000)			textField.selectable 	= (typeof(options.selectable) == 'boolean' ? options.selectable : false)			textField.wordWrap 		= (typeof(options.wordWrap) == 'boolean' ? options.wordWrap : false)			textField.border 		= (typeof(options.border) == 'boolean' ? options.border : false)			textField.width 		= (typeof(options.width) == 'number' ? options.width : 450)			textField.height 		= (typeof(options.height) == 'number' ? options.height : 50)			x 						= (typeof(options.x) == 'number' ? options.x : x)			y 						= (typeof(options.y) == 'number' ? options.y : y)						addChild(textField)		}				public function set(text:String):void		{			textField.text = text						Base.log('TextField::set(' + textField.text + ')')		}				public function appendText(text:String):void		{			textField.appendText(text)						Base.log('TextField::set(' + textField.text + ')')		}				public function get():String		{			return textField.text		}	}}